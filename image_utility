def im_rotation1(im,rotation,im_size=512):
    center = ((im_size-1)/2,(im_size-1)/2)
    im_temp = im.copy()
    rotation_matrix = cv2.getRotationMatrix2D(center,rotation, 1) 
    im_temp_r = cv2.warpAffine(im_temp, rotation_matrix, (im_size,im_size))
    return im_temp_r
    
def im_rotation(im,rotation,im_size=(x,y)):
    center = ((im_size[0]-1)/2,(im_size[1]-1)/2)
    im_temp = im.copy()
    rotation_matrix = cv2.getRotationMatrix2D(center,rotation, 1) 
    im_temp_r = cv2.warpAffine(im_temp, rotation_matrix, (x,y))
    return im_temp_r    
    

def im_shift(im,shiftx,shifty):
    h,w = im.shape
    mat = np.array([[1, 0, shiftx], [0, 1, shifty]], dtype=np.float32)
    #print(mat)
    im_s = cv2.warpAffine(im, mat, (w,h))
    return im_s
    

def blend_im_dbg(f_xy,g_xy,t1,t2,angle,s_scale,folder_name,str_iy,str_ix,k,g512):
    '''input image shape is square'''
    fig = plt.figure(figsize=(20,5))
    h,w = g_xy.shape
    plt.subplot(141),plt.imshow(g_xy,cmap=cm.pink)
    
    #回転とスケール
    center = (w/2,h/2)
    rotation_matrix = cv2.getRotationMatrix2D(center, -angle, s_scale) #左周り角度(見た目）
    #print(rotation_matrix)
    g_r = cv2.warpAffine(g_xy, rotation_matrix,(w,h))
    #g_r = make_ref(g512,76,76,-angle,im_size=512)
    
    #平行移動
    h,w = g_r.shape
    shiftx = -t2
    shifty = -t1
    mat = np.array([[1, 0, shiftx], [0, 1, shifty]], dtype=np.float32)
    #print(mat)
    g_rs= cv2.warpAffine(g_r, mat, (w,h))
    
    im_corr = np.corrcoef(f_xy.reshape(-1,1).T, g_rs.reshape(-1,1).T)[0][1]
    plt.subplot(142),plt.imshow(g_r,cmap=cm.pink)
    plt.subplot(143),plt.imshow(g_rs,cmap=cm.pink)
    #g_xy = g_xy.astype(np.uint8)
    dst = cv2.addWeighted(f_xy, 0.5, g_rs , 0.5, 0)
    #plt.subplot(144),plt.imshow(dst,cmap=cm.pink)
    plt.subplot(144),plt.imshow(dst,cmap=cm.pink),plt.text(20,30,'{:.5f}'.format(im_corr),fontsize=17)
    plt.savefig(folder_name + str_iy +"_" + str_ix + "dbg" + str(k) + ".png")
    plt.close()
    return(im_corr)
    
    
def jyuusin(img):
    mu = cv2.moments(img, False)
    xc,yc= mu["m10"]/mu["m00"], mu["m01"]/mu["m00"]
    return(xc,yc)


def sobelxy(img):
    img2 = img.copy()
    sobelx = cv2.Sobel(img2,cv2.CV_64F,1,0,ksize=5)
    sobely = cv2.Sobel(img2,cv2.CV_64F,0,1,ksize=5)
    grad2 = np.sqrt(sobelx  ** 2 + sobely ** 2) 
    hosei = np.max(grad2)
    grad2 = grad2/hosei * 255
    imgs = grad2.astype(np.uint8)
    return(imgs)
